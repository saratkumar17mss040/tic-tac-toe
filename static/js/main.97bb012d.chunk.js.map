{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","step","status","current","winner","moves","map","move","desc","key","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"2PAeA,SAASA,EAAOC,GACZ,OACI,4BAAQC,UAAU,SAASC,QAASF,EAAME,SAAUF,EAAMG,O,IAI5DC,E,2KAqBQC,GAAI,IAAD,OACf,OAAQ,kBAACN,EAAD,CAAQI,MAAOG,KAAKN,MAAMO,QAAQF,GAAIH,QAAS,kBAAM,EAAKF,MAAME,QAAQG,Q,+BAahF,OACC,6BAEC,yBAAKJ,UAAU,aACbK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAEpB,yBAAKP,UAAU,aACbK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAEpB,yBAAKP,UAAU,aACbK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,S,GAnDJC,aA0DdC,E,kDAEL,WAAYV,GAAQ,IAAD,8BAClB,cAAMA,IACDW,MAAQ,CACZC,QAAS,CACR,CACCL,QAASM,MAAM,GAAGC,KAAK,QAGzBC,WAAY,EACZC,SAAS,GATQ,E,wDAaPX,GACX,IAAMO,EAAUN,KAAKK,MAAMC,QAAQK,MAAM,EAAEX,KAAKK,MAAMI,WAAa,GAE7DR,EADUK,EAAQA,EAAQM,OAAS,GACjBX,QAAQU,QAC5BE,EAAgBZ,IAAYA,EAAQF,KAGxCE,EAAQF,GAAKC,KAAKK,MAAMK,QAAU,IAAM,IACxCV,KAAKc,SAAS,CACbR,QAASA,EAAQS,OAAO,CAAC,CACxBd,QAASA,KAEVQ,WAAYH,EAAQM,OACpBF,SAAUV,KAAKK,MAAMK,a,6BAIhBM,GACNhB,KAAKc,SAAS,CACbL,WAAYO,EACZN,QAAUM,EAAO,IAAO,M,+BAIhB,IAcLC,EAdI,OACFX,EAAUN,KAAKK,MAAMC,QACrBY,EAAUZ,EAAQN,KAAKK,MAAMI,YAC7BU,EAASN,EAAgBK,EAAQjB,SACjCmB,EAAQd,EAAQe,KAAI,SAACL,EAAMM,GAChC,IAAMC,EAAOD,EAAO,eAAiBA,EACpC,mBACD,OACC,wBAAIE,IAAKF,GACR,4BAAQ3B,UAAU,aAAaC,QAAS,kBAAM,EAAK6B,OAAOH,KAAQC,OAWrE,OAJCN,EADGE,EACM,WAAaA,EAEb,iBAAmBnB,KAAKK,MAAMK,QAAU,IAAM,KAGvD,yBAAKf,UAAU,QACd,yBAAKA,UAAU,cACd,kBAACG,EAAD,CAAOG,QAASiB,EAAQjB,QAASL,QAAS,SAACG,GAAD,OAAO,EAAK2B,YAAY3B,OAEnE,yBAAKJ,UAAU,aACd,6BAAMsB,GACN,4BAAKG,S,GAlESjB,aAyEnB,SAASU,EAAgBZ,GAYxB,IAXA,IAAM0B,EAAQ,CACb,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGC5B,EAAI,EAAGA,EAAI4B,EAAMf,OAAQb,IAAK,CAAC,IAAD,cACpB4B,EAAM5B,GADc,GAC/B6B,EAD+B,KAC5BC,EAD4B,KACzBC,EADyB,KAEtC,GAAI7B,EAAQ2B,IAAM3B,EAAQ2B,KAAO3B,EAAQ4B,IAAM5B,EAAQ2B,KAAO3B,EAAQ6B,GACrE,OAAO7B,EAAQ2B,GAGjB,OAAO,KAGRG,IAASC,OAAO,kBAAC5B,EAAD,MAAU6B,SAASC,eAAe,W","file":"static/js/main.97bb012d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n// import { render } from '@testing-library/react';\r\n\r\n// class Square extends Component {\r\n// \trender() {\r\n// \t\treturn (\r\n// \t\t\t<button className=\"square\" onClick={() => this.props.onClick()}>\r\n// \t\t\t\t{this.props.value}\r\n// \t\t\t</button>\r\n// \t\t);\r\n// \t}\r\n// }\r\n\r\nfunction Square(props) {\r\n    return (\r\n        <button className=\"square\" onClick={props.onClick}>{props.value}</button>\r\n    );\r\n}\r\n\r\nclass Board extends Component {\r\n\t// constructor(props) {\r\n\t// \tsuper(props);\r\n\t// \tthis.state = {\r\n\t// \t\tsquares: Array(9).fill(null),\r\n\t// \t\txIsNext: true,\r\n\t// \t};\r\n    // }\r\n    \r\n    // handleClick(i) {\r\n\t// \tconst squares = this.state.squares.slice();\r\n\t// \tif (calculateWinner(squares) || squares[i]) {\r\n\t// \t\treturn;\r\n\t// \t}\r\n\t// \tsquares[i] = this.state.xIsNext ? 'X' : 'O';\r\n\t// \tthis.setState({\r\n\t// \t\tsquares: squares,\r\n\t// \t\txIsNext: !this.state.xIsNext,\r\n\t// \t});\r\n    // }\r\n\r\n\trenderSquare(i) {\r\n\t\treturn (<Square value={this.props.squares[i]} onClick={() => this.props.onClick(i)} />);\r\n\t}\r\n\r\n\trender() {\r\n\t\t// let status;\r\n\t\t// const winner = calculateWinner(this.state.squares);\r\n\t\t// if (winner) {\r\n\t\t// \tstatus = `Winner ${winner}`;\r\n\t\t// }\r\n\t\t// else {\r\n\t\t// \tstatus = 'Next player:' + (this.state.xIsNext ? 'X' : 'O');\r\n\t\t// }\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{/* <div className=\"status\">{status}</div> */}\r\n\t\t\t\t<div className=\"board-row\">\r\n\t\t\t\t\t{this.renderSquare(0)}\r\n\t\t\t\t\t{this.renderSquare(1)}\r\n\t\t\t\t\t{this.renderSquare(2)}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"board-row\">\r\n\t\t\t\t\t{this.renderSquare(3)}\r\n\t\t\t\t\t{this.renderSquare(4)}\r\n\t\t\t\t\t{this.renderSquare(5)}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"board-row\">\r\n\t\t\t\t\t{this.renderSquare(6)}\r\n\t\t\t\t\t{this.renderSquare(7)}\r\n\t\t\t\t\t{this.renderSquare(8)}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nclass Game extends Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thistory: [\r\n\t\t\t\t{\r\n\t\t\t\t\tsquares: Array(9).fill(null),\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tstepNumber: 0,\r\n\t\t\txIsNext: true,\r\n\t\t};\r\n\t}\r\n\r\n\thandleClick(i) {\r\n\t\tconst history = this.state.history.slice(0,this.state.stepNumber + 1);\r\n\t\tconst current = history[history.length - 1];\r\n\t\tconst squares = current.squares.slice();\r\n\t\tif (calculateWinner(squares) || squares[i]) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tsquares[i] = this.state.xIsNext ? 'X' : 'O';\r\n\t\tthis.setState({\r\n\t\t\thistory: history.concat([{\r\n\t\t\t\tsquares: squares,\r\n\t\t\t}]),\r\n\t\t\tstepNumber: history.length,\r\n\t\t\txIsNext: !this.state.xIsNext,\r\n\t\t});\r\n\t}\r\n\r\n\tjumpTo(step) {\r\n\t\tthis.setState({\r\n\t\t\tstepNumber: step,\r\n\t\t\txIsNext: (step % 2) === 0,\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst history = this.state.history;\r\n\t\tconst current = history[this.state.stepNumber];\r\n\t\tconst winner = calculateWinner(current.squares);\r\n\t\tconst moves = history.map((step, move) => {\r\n\t\t\tconst desc = move ? 'Go to move #' + move :\r\n\t\t\t\t'Go to game start';\r\n\t\t\treturn (\r\n\t\t\t\t<li key={move}>\r\n\t\t\t\t\t<button className=\"game-moves\" onClick={() => this.jumpTo(move)}>{desc}</button>\r\n\t\t\t\t</li>\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\tlet status;\r\n\t\tif (winner) {\r\n\t\t\tstatus = 'Winner: ' + winner;\r\n\t\t} else {\r\n\t\t\tstatus = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<div className=\"game\">\r\n\t\t\t\t<div className=\"game-board\">\r\n\t\t\t\t\t<Board squares={current.squares} onClick={(i) => this.handleClick(i)} />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"game-info\">\r\n\t\t\t\t\t<div>{status}</div>\r\n\t\t\t\t\t<ol>{moves}</ol>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n\tconst lines = [\r\n\t\t[0, 1, 2],\r\n\t\t[3, 4, 5],\r\n\t\t[6, 7, 8],\r\n\t\t[0, 3, 6],\r\n\t\t[1, 4, 7],\r\n\t\t[2, 5, 8],\r\n\t\t[0, 4, 8],\r\n\t\t[2, 4, 6],\r\n\t];\r\n\r\n\tfor (let i = 0; i < lines.length; i++) {\r\n\t\tconst [a, b, c] = lines[i];\r\n\t\tif (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n\t\t\treturn squares[a];\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n}\r\n\r\nReactDOM.render(<Game />, document.getElementById('root'));\r\n"],"sourceRoot":""}